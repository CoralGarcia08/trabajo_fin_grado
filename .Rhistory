lat=~LATITUDE,
icon=list(),
popup=~paste0(type.house, " - ", house.price, " euros")) %>%
addMiniMap()
library(dplyr)
library(leaflet)
m <- leaflet(data=madrid_sale[sample(nrow(madrid_sale),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(type.house, " - ", house.price, " euros")) %>%
addMiniMap()
m <- leaflet(data=madrid_sale[sample(nrow(madrid_sale),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(house.price, " euros")) %>%
addMiniMap()
m <- leaflet(data=madrid_sale[sample(nrow(madrid_sale),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(house.price, " euros")) %>%
addMiniMap()
m <- leaflet(data=madrid_sale[sample(nrow(madrid_sale),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(PRICE, " euros")) %>%
addMiniMap()
m
datos_map <-madrid_sale[sample(nrow(madrid_sale),368),]
precios<-datos_map$house.price
precios<-madrid_sale$price
getColor <- function(precios_nor) {
sapply(scale(precios_nor), function(tip) {
if(tip <= -0.5) {
"green"
} else if(tip <= 0.75) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(log(precios))
)
precios<-madrid_sale$PRICE
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(log(precios))
)
datos_map <-madrid_sale[sample(nrow(madrid_sale),368),]
precios<-datos_map$PRICE
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(log(precios))
)
leaflet(datos_map)%>%
addTiles() %>%
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=icons,
label=~paste0(PRICE, " euros"),
popup=~paste0(PRICE, " euros"))
######################
####################
str(madrid_sale)
hist(madrid_sale$PRICE)
hist(madrid_sale$PRICE,xlim=c(0,10))
hist(madrid_sale$PRICE,xlim=c(0,10000))
hist(madrid_sale$PRICE,xlim=c(0,1000000))
hist(madrid_sale$PRICE,xlim=c(0,10000000000))
hist(madrid_sale$PRICE,xlim=c(0,100000000))
hist(madrid_sale$PRICE,xlim=c(0,10000000))
hist(madrid_sale$PRICE,xlim=c(0,1000000))
hist(madrid_sale$PRICE,xlim=c(0,10000000))
hist(madrid_sale$PRICE)
madrid_sale$PRICE
madrid_sale$priceMil <- madrid_sale$PRICE / 1000
hist(madrid_sale$priceMil)
sum(is.na(madrid_sale))
sum(is.na(madrid_sale$CONSTRUCTIONYEAR))
cor(madrid_sale$CONSTRUCTIONYEAR,madrid_sale$CADCONSTRUCTIONYEAR)
#######
#######
madrid_sale$CONSTRUCTIONYEAR <- NULL
sum(is.na(madrid_sale))
p <- na.omit(madrid_sale)
madrid_sale2 <- na.omit(madrid_sale)
madrid_sf <- st_as_sf(madrid_sale2, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs("+proj=longlat +datum=WGS84"))
install.packages("sf")
library(sf)
madrid_sf <- st_as_sf(madrid_sale2, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs("+proj=longlat +datum=WGS84"))
View(madrid_sf)
madrid_sf <- st_as_sf(madrid_sale2, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs("+proj=longlat +datum=WGS84"))
View(madrid_sf)
View(madrid_sale2)
View(madrid_sale)
View(madrid_sale2)
sum(is.na(madrid_sale))
madrid_sale2 <- na.omit(madrid_sale)
sum(is.na(madrid_sale2))
names(madrid_sale2)
madrid_sf <- st_as_sf(madrid_sale2, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs("+proj=longlat +datum=WGS84"))
View(madrid_sf)
str(mad)
str(madrid_sf)
str(madrid_sale2)
str(madrid_sale)
madrid_sale <- Madrid_Sale
plot(madrid_sale$PRICE,madrid_sale$CONSTRUCTEDAREA)
plot(madrid_sale[sample(nrow(madrid_sale),368),]$PRICE,madrid_sale[sample(nrow(madrid_sale),368),]$CONSTRUCTEDAREA)
plot(madrid_sale[sample(nrow(madrid_sale),10000),]$PRICE,madrid_sale[sample(nrow(madrid_sale),10000),]$CONSTRUCTEDAREA)
madrid_sale
plot(madrid_sale$PRICE,madrid_sale$CONSTRUCTEDAREA)
cor <- cor(madrid_sale)
View(madrid_sale)
sum(is.na(madrid_sale))
madrid_sale2 <- na.omit(madrid_sale)
madrid_sale2 <- na.omit(madrid_sale)
madrid_sale <- Madrid_Sale
sum(is.na(madrid_sale))
madrid_sale2 <- na.omit(madrid_sale)
madrid_sale$CONSTRUCTIONYEAR <- NULL
madrid_sale$PERIOD <- NULL
sum(is.na(madrid_sale))
madrid_sale2 <- na.omit(madrid_sale)
View(madrid_sale2)
#librerias
library(idealista18) #de donde voy a sacar los datos
library(leaflet)
library(dplyr)
library(sf)
madrid_sale <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
View(polygons)
View(madrid_pois)
View(madrid_pois)
m <- leaflet(data=madrid_sale[sample(nrow(madrid_sale),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(PRICE, " euros")) %>%
addMiniMap()
m
datos_map <-madrid_sale[sample(nrow(madrid_sale),368),]
precios<-datos_map$PRICE
getColor <- function(precios_nor) {
sapply(scale(precios_nor), function(tip) {
if(tip <= -0.5) {
"green"
} else if(tip <= 0.75) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(log(precios))
)
leaflet(datos_map)%>%
addTiles() %>%
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=icons,
label=~paste0(PRICE, " euros"),
popup=~paste0(PRICE, " euros"))
######################
####################
summary(madrid_sale)
str(madrid_sale)
hist(madrid_sale$PRICE)
plot(madrid_sale$PRICE,madrid_sale$CONSTRUCTEDAREA)
#librerias
library(idealista18) #de donde voy a sacar los datos
library(leaflet)
library(dplyr)
library(sf)
#leemos los datos de la linbreria idealista
madrid_sale <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
names(madrid_sale)
m <- leaflet(data=madrid_sale[sample(nrow(madrid_sale),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(PRICE, " euros")) %>%
addMiniMap()
m
datos_map <-madrid_sale[sample(nrow(madrid_sale),368),]
precios<-datos_map$PRICE
getColor <- function(precios_nor) {
sapply(scale(precios_nor), function(tip) {
if(tip <= -0.5) {
"green"
} else if(tip <= 0.75) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(log(precios))
)
leaflet(datos_map)%>%
addTiles() %>%
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=icons,
label=~paste0(PRICE, " euros"),
popup=~paste0(PRICE, " euros"))
load("C:/Users/Coral/Desktop/TFG/Scripts/Madrid_Sale.RData")
View(Madrid_Sale)
madrid_sale <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
#librerias
library(idealista18) #de donde voy a sacar los datos
library(leaflet)
library(dplyr)
library(sf)
madrid_sale <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
library(idealista18) #de donde voy a sacar los datos
library(leaflet)
library(dplyr)
library(sf)
madrid_sale <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
summary(madrid_sale)
str(madrid_sale)
### valores faltantes
sum(is.na(datos))
### valores faltantes
sum(is.na(madrid_sale))
datos <- na.omit(madrid_sale)
### valores faltantes
sum(is.na(madrid_sale))
missing_values <- colSums(is.na(madrid_sale))
# Muestra el número de valores faltantes en cada variable
print(missing_values)
df_raw <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
df_raw <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
missing_values <- colSums(is.na(df_raw))
print(missing_values)
View(df_raw)
df <- subset(df_raw, -c(ASSETID, PERIOD))
df <- df_raw[-1]
View(df)
df_raw <- Madrid_Sale
df <- subset(df_raw, select = -c(ASSETID, PERIOD))
df <- subset(df_raw, select = -c(ASSETID, PERIOD, ISPARKINGSPACEINCLUDEDINPRICE, PARKINGSPACEPRICE, FLATLOCATIONID))
df <- subset(df_raw, select = -c(ASSETID, PERIOD, ISPARKINGSPACEINCLUDEDINPRICE, PARKINGSPACEPRICE, FLATLOCATIONID, CONSTRUCTIONYEAR))
missing_values <- colSums(is.na(df))
print(missing_values)
df <- subset(df_raw, select = -c(ASSETID, PERIOD, ISPARKINGSPACEINCLUDEDINPRICE, PARKINGSPACEPRICE,
FLATLOCATIONID, CONSTRUCTIONYEAR, FLOORCLEAN, CADASTRALQUALITYID))
missing_values <- colSums(is.na(df))
print(missing_values)
summary(df)
hist(madrid_sale$PRICE)
hist(df$PRICE)
df$priceMil <- df$PRICE / 1000
hist(df$PRICE)
plot(df$PRICE,df$CONSTRUCTEDAREA)
hist(df$PRICE)
plot(df$PRICE,df$CONSTRUCTEDAREA)
head(df)
ggplot(df, aes(x = CONSTRUCTEDAREA, y = PRICE)) +
geom_point() +
labs(x = "Área construida", y = "Precio")
library(ggplot2)
ggplot(df, aes(x = CONSTRUCTEDAREA, y = PRICE)) +
geom_point() +
labs(x = "Área construida", y = "Precio")
df_sample = df %>% sample(df,20000, repalce=FALSE)
df_sample = df %>% sample(df,20000)
df_sample = df %>% sample(df,1000)
df_sample = df %>% sample_n(20000, replace=FALSE)
ggplot(df_sample, aes(x = CONSTRUCTEDAREA, y = PRICE)) +
geom_point() +
labs(x = "Área construida", y = "Precio")
options(scipen = 999)
ggplot(df_sample, aes(x = CONSTRUCTEDAREA, y = PRICE)) +
geom_point() +
labs(x = "Área construida", y = "Precio")
ggplot(df_sample, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df_sample, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "cyan", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df_sample, aes(x = ROOMNUMBER, y = PRICE, fill = as.factor(HASLIFT))) +
geom_boxplot() +
labs(x = "Número de habitaciones", y = "Precio")
ggplot(df, aes(x = DISTANCE_TO_CITY_CENTER, y = PRICE)) +
geom_point() +
labs(x = "Distancia al centro de la ciudad", y = "Precio")
ggplot(df, aes(x = DISTANCE_TO_CITY_CENTER)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df, aes(x = DISTANCE_TO_CITY_CENTER, y = PRICE)) +
geom_point() +
labs(x = "Distancia al centro de la ciudad", y = "Precio")
ggplot(df, aes(x = DISTANCE_TO_CITY_CENTER, y = PRICE)) +
geom_boxplot() +
labs(x = "Distancia al centro de la ciudad", y = "Precio")
ggplot(df, aes(x = PRICE , y = DISTANCE_TO_CITY_CENTER)) +
geom_boxplot() +
labs(x = "Distancia al centro de la ciudad", y = "Precio")
library(outliers)
install.packages("outliers")
grubbs.test(df$PRICE)
library(outliers)
grubbs.test(df$PRICE)
grubbs.test(df$DISTANCE_TO_CITY_CENTER)
grubbs.test(df$CONSTRUCTEDAREA)
ggplot(df_sample, aes(x = CONSTRUCTEDAREA, y = PRICE)) +
geom_point() +
labs(x = "Área construida", y = "Precio")
df_raw <- Madrid_Sale
View(df)
View(df_raw)
missing_values <- colSums(is.na(df_raw))
print(missing_values)
summary(df_raw)
df <- subset(df_raw, select = -c(ASSETID, PERIOD, ISPARKINGSPACEINCLUDEDINPRICE, PARKINGSPACEPRICE,
FLATLOCATIONID, CONSTRUCTIONYEAR, FLOORCLEAN, CADASTRALQUALITYID,
BUILTTYPEID_1, BUILTTYPEID_2, BUILTTYPEID_3))
m <- leaflet(data=madrid_sale[sample(nrow(madrid_sale),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(PRICE, " euros")) %>%
addMiniMap()
m <- leaflet(data=df[sample(nrow(df),200),]) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=list(),
popup=~paste0(PRICE, " euros")) %>%
addMiniMap()
m
datos_map <-df[sample(nrow(df),368),]
precios<-datos_map$PRICE
getColor <- function(precios_nor) {
sapply(scale(precios_nor), function(tip) {
if(tip <= -0.5) {
"green"
} else if(tip <= 0.75) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(log(precios))
)
leaflet(datos_map)%>%
addTiles() %>%
addAwesomeMarkers(lng=~LONGITUDE,
lat=~LATITUDE,
icon=icons,
label=~paste0(PRICE, " euros"),
popup=~paste0(PRICE, " euros"))
library(idealista18) #de donde voy a sacar los datos
library(leaflet)
library(dplyr)
library(sf)
library(ggplot2)
df_raw <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
summary(df_raw)
df <- subset(df_raw, select = -c(ASSETID, PERIOD, ISPARKINGSPACEINCLUDEDINPRICE, PARKINGSPACEPRICE,
FLATLOCATIONID, CONSTRUCTIONYEAR, FLOORCLEAN, CADASTRALQUALITYID,
BUILTTYPEID_1, BUILTTYPEID_2, BUILTTYPEID_3))
missing_values <- colSums(is.na(df))
print(missing_values)
### valores faltantes
sum(is.na(df))
View(df)
hist(df$PRICE)
df_sample = df %>% sample_n(20000, replace=FALSE)
options(scipen = 999)
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
ggplot(df_sample, aes(x = CONSTRUCTEDAREA, y = PRICE)) +
geom_point() +
labs(x = "Área construida", y = "Precio")
ggplot(df, aes(x = PRICE , y = DISTANCE_TO_CITY_CENTER)) +
geom_boxplot() +
labs(x = "Distancia al centro de la ciudad", y = "Precio")
hist(df$PRICE)
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
hist(df$PRICE)
ggplot(df, aes(x = PRICE)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black") +
labs(x = "Precio", y = "Frecuencia")
df_sf <- st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs("+proj=longlat +datum=WGS84"))
# librerias
library(idealista18) #de donde voy a sacar los datos
library(leaflet)
library(dplyr)
library(sf)
library(ggplot2)
# datos
df_raw <- Madrid_Sale
polygons <- Madrid_Polygons
madrid_pois <- Madrid_POIS
#####################################################
############### ANALISIS EXPLORATORIO ###############
#####################################################
###Exploracion inicial: estructura y variables
names(madrid_sale)
names(df_raw)
# #ASSETID: Un identificador único para cada activo o propiedad.
# PERIOD: El período al que pertenecen los datos, posiblemente la fecha de registro o publicación.
# PRICE: El precio de venta de la propiedad.
# UNITPRICE: El precio por unidad de área (por ejemplo, precio por metro cuadrado).
# CONSTRUCTEDAREA: El área de construcción de la propiedad.
# ROOMNUMBER: El número de habitaciones en la propiedad.
# BATHNUMBER: El número de baños en la propiedad.
# HASTERRACE: Indicador de si la propiedad tiene terraza.
# HASLIFT: Indicador de si la propiedad tiene ascensor.
# HASAIRCONDITIONING: Indicador de si la propiedad tiene aire acondicionado.
# AMENITYID: Un identificador relacionado con comodidades o características especiales de la propiedad.
# HASPARKINGSPACE: Indicador de si la propiedad tiene espacio de estacionamiento.
# ISPARKINGSPACEINCLUDEDINPRICE: Indicador de si el espacio de estacionamiento está incluido en el precio.
# PARKINGSPACEPRICE: El precio del espacio de estacionamiento.
# HASNORTHORIENTATION: Indicador de si la propiedad tiene orientación al norte.
# HASSOUTHORIENTATION: Indicador de si la propiedad tiene orientación al sur.
# HASEASTORIENTATION: Indicador de si la propiedad tiene orientación al este.
# HASWESTORIENTATION: Indicador de si la propiedad tiene orientación al oeste.
# HASBOXROOM: Indicador de si la propiedad tiene trastero.
# HASWARDROBE: Indicador de si la propiedad tiene armario empotrado.
# HASSWIMMINGPOOL: Indicador de si la propiedad tiene piscina.
# HASDOORMAN: Indicador de si la propiedad cuenta con portero o conserje.
# HASGARDEN: Indicador de si la propiedad tiene jardín.
# ISDUPLEX: Indicador de si la propiedad es un dúplex.
# ISSTUDIO: Indicador de si la propiedad es un estudio.
# ISINTOPFLOOR: Indicador de si la propiedad está en la planta superior.
# CONSTRUCTIONYEAR: Año de construcción de la propiedad.
# FLOORCLEAN: Limpiador de suelos de la propiedad.
# FLATLOCATIONID: Identificador de la ubicación del piso.
# CADCONSTRUCTIONYEAR: Año de construcción según el catastro.
# CADMAXBUILDINGFLOOR: Máxima planta del edificio según el catastro. segun kike fuera
# CADDWELLINGCOUNT: Número de viviendas en el edificio según el catastro.
# CADASTRALQUALITYID: Identificador de la calidad catastral.
# BUILTTYPEID_1, BUILTTYPEID_2, BUILTTYPEID_3: Identificadores relacionados con el tipo de construcción.
# DISTANCE_TO_CITY_CENTER, DISTANCE_TO_METRO, DISTANCE_TO_CASTELLANA: Distancia de la propiedad al centro de la ciudad, al metro y a la Castellana.
#amenityid???
summary(df_raw)
str(df_raw)
### valores faltantes
sum(is.na(df_raw))
missing_values <- colSums(is.na(df_raw))
print(missing_values)
df <- subset(df_raw, select = -c(ASSETID, PERIOD, ISPARKINGSPACEINCLUDEDINPRICE, PARKINGSPACEPRICE,
FLATLOCATIONID, CONSTRUCTIONYEAR, FLOORCLEAN, CADASTRALQUALITYID,
BUILTTYPEID_1, BUILTTYPEID_2, BUILTTYPEID_3))
df_sf <- st_as_sf(df, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs("+proj=longlat +datum=WGS84"))
